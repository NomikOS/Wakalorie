/**  * @fileOverview methods for the ErrLog datastore class * @author Welsh Harris * @created 11/08/2013 * * @name CalorieCounter * @copyright (c) 2013 CoreBits DataWorks LLC * @license Released under the MIT license (included in distribution in MIT LICENSE.txt) *///-------------------------------------------------------------------------//entity //-------------------------------------------------------------------------//-------------------------------------------------------------------------//collection //-------------------------------------------------------------------------//-------------------------------------------------------------------------//class //-------------------------------------------------------------------------//record an error that occurred on the servermodel.ErrLog.methods.errOnServer = function (name, func, file, errInfo) {	"use strict";		errInfo = errInfo || ""; //errInfo is optional		var level = "",		errDefEntity = {},		errEntity = {};		//get the error definition	errDefEntity = ds.ErrDef.find("name = :1", name);	if (errDefEntity !== null) {		level = errDefEntity.level;	}		//create the err log entity	errEntity = ds.ErrLog.createEntity();	errEntity.dts = new Date();	errEntity.userName = currentSession().user.name;	errEntity.errorName = name;	errEntity.errorInfo = errInfo;	errEntity.source = "server";	errEntity.env = "";	errEntity.jsFunction = func;	errEntity.jsFile = file;	errEntity.level = level;	errEntity.isEmailed = false;	errEntity.save();}//record an error that occurred on the clientmodel.ErrLog.methods.errOnClient = function (paramsJSON) {	"use strict";	var level = "",		errDefEntity = {},		errEntity = {},		msgToUser = "",		alertUser = false,		params = JSON.parse(paramsJSON),		errInfoForUser = "";			require("underscore").defaults(params, {		name: "Gen_Client",		errInfo: "",		userAgent: "",		func: "",		file: ""	});	//get the error definition	errDefEntity = ds.ErrDef.find("name = :1", params.name);	if (errDefEntity !== null) {		level = errDefEntity.level;		errInfoForUser = JSON.parse(params.errInfo);		msgToUser = errDefEntity.msg;		msgToUser = msgToUser.replace("*ErrInfo*", errInfoForUser[0].message);		alertUser = errEntity.alertUser;	} else {		msgToUser = "An unknown error occurred";		level = "critical";		alertUser = true;	}		//create the err log entity	errEntity = ds.ErrLog.createEntity();	errEntity.dts = new Date();	errEntity.userName = currentSession().user.name;	errEntity.errorName = params.name;	errEntity.errorInfo = params.errInfo;	errEntity.source = "client";	errEntity.env = params.userAgent;	errEntity.jsFunction = params.func;	errEntity.jsFile = params.file;	errEntity.level = level;	errEntity.isEmailed = false;	errEntity.save();		//return message to display to the user	if (alertUser === false) {		msgToUser = "";			}	return msgToUser;	}//set scope of class methodsmodel.ErrLog.methods.errOnServer.scope ="publicOnServer";model.ErrLog.methods.errOnClient.scope ="public";