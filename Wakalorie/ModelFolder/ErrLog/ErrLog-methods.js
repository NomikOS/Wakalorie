/**  * @fileOverview methods for the ErrLog datastore class * @author Welsh Harris * @created 11/08/2013 * * @name CalorieCounter * @copyright (c) 2013 CoreBits DataWorks LLC * @license Released under the MIT license (included in distribution in MIT LICENSE.txt) *///-------------------------------------------------------------------------//entity //-------------------------------------------------------------------------//-------------------------------------------------------------------------//collection //-------------------------------------------------------------------------//-------------------------------------------------------------------------//class //-------------------------------------------------------------------------//record an error that occurred on the servermodel.ErrLog.methods.errOnServer = function (name, func, file, errInfo) {	"use strict";		errInfo = errInfo || ""; //errInfo is optional		var level = "",		errDefEntity = {},		errEntity = {},		env = "";		//get the error definition	errDefEntity = ds.ErrDef.find("name = :1", name);	if (errDefEntity !== null) {		level = errDefEntity.level;	}		//determin os	switch (true) {		case os.isLinux:			env = "Linux";			break;		case os.isMac:			env = "Mac";			break;		case os.isWindows:			env = "Windows";			break;	}		//create the err log entity	errEntity = ds.ErrLog.createEntity();	errEntity.dts = new Date();	errEntity.userName = currentSession().user.name;	errEntity.errorName = name;	errEntity.errorInfo = errInfo;	errEntity.source = "server";	errEntity.env = env;	errEntity.jsFunction = func;	errEntity.jsFile = file;	errEntity.level = level;	errEntity.isEmailed = false;	errEntity.save();}//generic handler for when we catch an errormodel.ErrLog.methods.serverCatch = function (errObj, func, errInfo) {	"use strict";		errInfo = errInfo || ""; //errInfo is optional		var level = "",		errDefEntity = {},		errEntity = {},		name = "Gen_Catch",		env = "";	//get the error definition	errDefEntity = ds.ErrDef.find("name = :1", name);	if (errDefEntity !== null) {		level = errDefEntity.level;	}		//determin os	switch (true) {		case os.isLinux:			env = "Linux";			break;		case os.isMac:			env = "Mac";			break;		case os.isWindows:			env = "Windows";			break;	}		//create the err log entity	errEntity = ds.ErrLog.createEntity();	errEntity.dts = new Date();	errEntity.userName = currentSession().user.name;	errEntity.errorName = name;	errEntity.errorInfo = errInfo;	errEntity.source = "server";	errEntity.env = env;	errEntity.jsFunction = func;	errEntity.jsFile = errObj.sourceURL;	errEntity.level = level;	errEntity.isEmailed = false;	errEntity.lineNo = errObj.line;	errEntity.save();		}//record an error that occurred on the clientmodel.ErrLog.methods.errOnClient = function (paramsJSON) {	"use strict";	var level = "",		errDefEntity = {},		errEntity = {},		msgToUser = "",		alertUser = false,		params = "",		errInfoForUser = "",		_ = require("underscore"),		errInfo = "",		errName = null;			//check parameters	if (_.isString(paramsJSON) === false) {		errName = "Gen_InvalidParam";		errInfo = "paramsJSON passed in as a " + typeof paramsJSON + " but should be passed in as a string";	}		//parse the input json	if (!errName) {		params = JSON.parse(paramsJSON);	}		//set defaults for optional params	if (!errName) {		_.defaults(params, {			name: "Gen_Client",			errInfo: "",			userAgent: "",			func: "",			file: ""		});	}	//get the error definition	if (!errName) {		errDefEntity = ds.ErrDef.find("name = :1", params.name);		if (errDefEntity !== null) {			level = errDefEntity.level;			errInfoForUser = JSON.parse(params.errInfo);			msgToUser = errDefEntity.msg;			msgToUser = msgToUser.replace("*ErrInfo*", errInfoForUser[0].message);			alertUser = errEntity.alertUser;		} else {			msgToUser = "An unknown error occurred";			level = "critical";			alertUser = true;		}	}	debugger;	//create the err log entity	if (!errName) {		errEntity = ds.ErrLog.createEntity();		errEntity.dts = new Date();		errEntity.userName = currentSession().user.name;		errEntity.errorName = params.name;		errEntity.errorInfo = params.errInfo;		errEntity.source = "client";		errEntity.env = params.userAgent;		errEntity.jsFunction = params.func;		errEntity.jsFile = params.file;		errEntity.level = level;		errEntity.isEmailed = false;		errEntity.save();	}		//return message to display to the user	if (!errName) {		if (alertUser === false) {			msgToUser = "";				}	} else {		msgToUser = "";	}		//record any errors	if (errName) {		ds.ErrLog.errOnServer(errName, "errOnClient", "Wakalorie/ModelFolder/ErrLog/ErrLog-methods.js", errInfo);	}		return msgToUser;	}//set scope of class methodsmodel.ErrLog.methods.errOnServer.scope ="publicOnServer";model.ErrLog.methods.serverCatch.scope ="publicOnServer";model.ErrLog.methods.errOnClient.scope ="public";