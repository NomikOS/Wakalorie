/**  * @fileOverview methods for the ErrDef datastore class * @author Welsh Harris * @created 11/08/2013 * * @name CalorieCounter * @copyright (c) 2013 CoreBits DataWorks LLC * @license Released under the MIT license (included in distribution in MIT LICENSE.txt) *///-------------------------------------------------------------------------//entity //-------------------------------------------------------------------------//-------------------------------------------------------------------------//collection //-------------------------------------------------------------------------//-------------------------------------------------------------------------//class //-------------------------------------------------------------------------//called at startup to add/modify our error definitionsmodel.ErrDef.methods.defineErrors = function () {	"use strict";		var errInfo = "*ErrInfo*",		modulePrefix = "";			//The reason we set these up in a datastore class is so we can change	//the settings in production. For instance, we might want to turn off	//emailing if we are getting tons of emails about one error.		//No need to create a msg for server side stuff, msg is just used to	//send an alert to the user client side.		//levels:	//* warning (if it happens a lot something is wrong, but we expect it to happen every once in a while)	//* error (this shouldn't happen, it is 3:00am, go back to sleep and fix this in the morning)	//* critical (it is 3:00am, you awaken and feel a great disturbence in the force, jump out of bed and fix this asap)		//general errors	if (true) {		modulePrefix = "GENERAL ERROR";			//Gen_ImpossibleElse		ds.ErrDef.add({			name: "Gen_ImpossibleElse",			modulePrefix: modulePrefix,			level: "error",			callThrow: false,			createLog: true,			sendEmail: true,			alertUser: false,			msg: ""		});				//Gen_InvalidParam		ds.ErrDef.add({			name: "Gen_InvalidParam",			modulePrefix: modulePrefix,			level: "error",			callThrow: false,			createLog: true,			sendEmail: true,			alertUser: false,			msg: ""		});				//Gen_Server		ds.ErrDef.add({			name: "Gen_Catch",			modulePrefix: modulePrefix,			level: "error",			callThrow: false,			createLog: true,			sendEmail: true,			alertUser: false,			msg: ""		});				//Gen_Client		ds.ErrDef.add({			name: "Gen_Client",			modulePrefix: modulePrefix,			level: "error",			callThrow: false,			createLog: true,			sendEmail: true,			alertUser: false,			msg: "An unexpected error occurred: " + errInfo		});		}		}//add or update an error definitionmodel.ErrDef.methods.add = function (err) {	"use strict";		var errEntity = {};		//create if it doesn't exist	errEntity = ds.ErrDef.find("name = :1", err.name);	if (errEntity === null) {		errEntity = ds.ErrDef.createEntity();		errEntity.name = err.name;		if (err.msg !== "") {			errEntity.msg = err.modulePrefix + " (" + err.name + "): " + err.msg;		};		errEntity.callThrow = err.callThrow;		errEntity.createLog = err.createLog;		errEntity.alertUser = err.alertUser;		errEntity.sendEmail = err.sendEmail;		errEntity.level = err.level;		errEntity.save();	}	}//set scope of class methodsmodel.ErrDef.methods.defineErrors.scope ="publicOnServer";model.ErrDef.methods.add.scope ="publicOnServer";