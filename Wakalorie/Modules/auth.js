/**  * @fileOverview Server side authentication and authorization module * @author Welsh Harris * @created 10/18/2013 * * @name Wakalorie * @copyright (c) 2013 CoreBits DataWorks LLC * @license Released under the MIT license (included in distribution in MIT LICENSE.txt) */"use strict";//Wish we could put the custom login handler in here as well, but couldn't get//it to work.  So the code for authentication is actually in required.js in the //main solution folder.//get a collection of all the entities the current user is allowed to see//(used by onRestrictingQuery datastore class events)exports.allEntities = function(dsName) {	var session = currentSession(),		coll = ds[dsName].createEntityCollection(); //default to an empty collection		//load all entities the current user is allowed to see	switch (dsName) {				case "User":			if (session.belongsTo("Admin")) {				coll = ds.User.all();			}			break;		case "Day":			if (session.belongsTo("Admin")) {				coll = ds.Day.all();			} else {				coll = ds.Day.query("userUUID = :1", session.user.ID);			}			break;					case "DayFood":			if (session.belongsTo("Admin")) {				coll = ds.DayFood.all();			} else {				coll = ds.Day.all().dayFoods;			}			break;					case "Food":			if (session.belongsTo("Admin")) {				coll = ds.Food.all();			} else {				coll = ds.Food.query("userUUID = :1", session.user.ID);			}			break;				} //switch		//return the collection	return coll;}//limit specific functionality to certain groupsexports.userCan = function(action) {	var session = currentSession();		can = false;		switch (action) {				case "Whatever": //this is just a placeholder until I have something real to pass			if (session.belongsTo === "Admin") {				can = true;			}			break;					default:			ds.ErrLog.errOnServer("Gen_ImpossibleElse", "userCan", "Wakalorie/Modules/auth.js");	}		return can;}