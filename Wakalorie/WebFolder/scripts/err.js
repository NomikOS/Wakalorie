/**  * @fileOverview General stuff for error handling * @author Welsh Harris * @created 08/08/2013 * * @name Wakalorie * @copyright (c) 2013 CoreBits DataWorks LLC * @license Released under the MIT license (included in distribution in MIT LICENSE.txt) *//** @namespace */var WAKL = WAKL || {};WAF.onAfterInit = function() {	"use strict";  WAKL.err = (function() {			//help WAF async callback functions check for an error, if there	//was an error we handle it here, otherwise the calling method just	//keeps on going with what it was doing	function async_ThereWasntAnError (event) {		var ret = false;				if (event.error !== null && event.error !== undefined) { //error attribute exists and isn't null so there was an error			errorHandler(event.error);			ret = false;		} else {			ret = true;		}				return ret;	}		//callback for async functions where we don't need to do anything	//in the callback besides check for errors	function async_ErrCheckOnly(event) {		if (event.error !== null && event.error !== undefined) {			errorHandler(event.error);		}	}		//basic error handler	function errorHandler(error) {		var errMsg = error[0].message;				if (errMsg = "SyntaxError: JSON.parse: unexpected end of data") {			alert("Cannot connect to the server");		} else {			alert(error[0].message);		}	}	//--------------------	//public API	//--------------------	return {		async_ErrCheckOnly: async_ErrCheckOnly,		errorHandler: errorHandler,		async_ThereWasntAnError: async_ThereWasntAnError	};	}());};